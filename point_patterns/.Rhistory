labs(title = "ExAR") +
ylab(expression(E[x]==S%*%P[x])) +
theme_classic() +
theme(legend.position="none")
pdf("Figure_SAR.pdf", width=6, height=2.3)
grid.arrange(SAR, PxAR, ExAR, nrow = 1)
dev.off()
library(mobsim) # simulating point pattern communities
library(manipulate) # sliders and interactive plotting
library(randomForest) # random forest
# graphics
library(tidyverse)
library(ggbreak)
library(gridExtra) # multiple ggplots in a figure
library(latex2exp) # for math symbols in figures
# parallel computation
library(foreach)
library(doParallel)
# our own functions
source("extinctions_functions.r")
# setting the random seed
set.seed(12345)
P.death <- effect.f(alpha = 0.9, beta = -0.3)
#manipulate(
#  effect.f(alpha, beta),
#  alpha = slider(0, 1, initial = 0.5, step = 0.05),
#  beta = slider(-1, 1, initial = 0, step = 0.05)
#)
## Set parameter values:
# set parameter values
params <- expand.grid(alpha = c(0.1, 0.3, 0.5, 0.7, 0.9),
beta = c(-1, -0.4, -0.3, 0, 0.3, 0.4, 1))
params <- data.frame(params, type = "")
params$type[params$beta < 0] <- "Allee"
params$type[params$beta > 0] <- "Janzen-Connell"
params$type[params$beta == 0] <- "Constant death"
# population abundance
N <- rep(1:100, each = nrow(params))
params <- data.frame(params, N)
# probability of death
P.death <- effect.f(alpha = params$alpha,
beta=params$beta,
N = params$N,
plot = FALSE)
params <- data.frame(params, P.death)
## Plot the three hypotheses:
p1 <- ggplot(data = params, aes(x = N, y= P.death)) +
geom_line(aes(colour = as.factor(beta),
colour = as.factor(alpha)),
size = 0.5) +
facet_grid(.~type) +
ylab(expression(P[death])) +
theme_classic() +
scale_colour_discrete(name = expression(beta)) +
theme(legend.position = "right")
p1
## Export figure for the paper
pdf("Figure_Bartak_functions.pdf", width = 9, height = 3)
p1
dev.off()
res <- read.csv("sim_results.csv")
slope.vs.beta.E <- ggplot(data = res, aes(x = as.factor(beta), y = slope.E)) +
#geom_vline(xintercept=as.factor(0), linetype = "dashed", colour = "grey") +
geom_abline(intercept=0, slope = 0, linetype = "dashed", colour = "grey") +
geom_boxplot(aes(fill = type), outlier.colour = "grey", outlier.shape = 1) +
facet_grid(.~as.factor(cv.abund)) +
theme_classic() +
ylim(c(-1.2,1.2)) +
labs(title="(b)") +
xlab(expression(beta)) +
ylab("ExAR slope") +
theme(legend.position = "none")
slope.vs.beta.E
slope.vs.beta.P <- ggplot(data = res, aes(x = as.factor(beta), y = slope.P)) +
#geom_vline(xintercept=as.factor(0), linetype = "dashed", colour = "grey") +
geom_abline(intercept=0, slope = 0, linetype = "dashed", colour = "grey") +
geom_boxplot(aes(fill = type), outlier.colour = "grey", outlier.shape = 1) +
facet_grid(.~as.factor(cv.abund)) +
theme_classic() +
xlab(expression(beta)) +
ylab("PxAR slope") +
labs(title="(a)") +
theme(legend.position = c(0.1, 0.8))
slope.vs.beta.P
slope.simple <- ggplot(data = res, aes(x = as.factor(beta), y = slope.P)) +
#geom_vline(xintercept=as.factor(0), linetype = "dashed", colour = "grey") +
geom_abline(intercept=0, slope = 0, linetype = "dashed", colour = "grey") +
geom_boxplot(aes(fill = type), outlier.colour = "grey", outlier.shape = 1) +
#facet_grid(.~as.factor(cv.abund)) +
theme_classic() +
xlab(expression(beta)) +
ylab("PxAR slope") +
theme(legend.position = c(0.8, 0.8))
slope.simple
grid.arrange(SADs, slope.vs.beta.E, slope.vs.beta.P , nrow = 3, heights=c(0.4, 0.7, 0.7))
dat <- SAD.prob.mass(1000, 100)
SADs <- ggplot(data = dat, aes(x=N, y = PM)) +
geom_point() +
geom_line() +
theme_classic() +
ylim(0, 0.4) + ylab("Probablity mass") +
xlab("N") +
labs(title="(c)") +
facet_grid(.~cv_abund)
SADs
SADs
dat
dat$cv_abund <- paste("CV_N =", dat$cv_abund)
SADs <- ggplot(data = dat, aes(x=N, y = PM)) +
geom_point() +
geom_line() +
theme_classic() +
ylim(0, 0.4) + ylab("Probablity mass") +
xlab("N") +
labs(title="(c)") +
facet_grid(.~cv_abund)
SADs
dat <- SAD.prob.mass(1000, 100)
dat$cv_abund <- expression(paste("CV_N =", dat$cv_abund))
SADs <- ggplot(data = dat, aes(x=N, y = PM)) +
geom_point() +
geom_line() +
theme_classic() +
ylim(0, 0.4) + ylab("Probablity mass") +
xlab("N") +
labs(title="(c)") +
facet_grid(.~cv_abund)
SADs
dat
?as_labeller
cv_names <- as_labeller(c(`0` = "Zero", `1` = "One"))
cv_names
cv_names <- as_labeller(c(0 = "Zero", 1 = "One"))
dat <- SAD.prob.mass(1000, 100)
dat$cv_abund <- paste("CV_N =", dat$cv_abund)
SADs <- ggplot(data = dat, aes(x=N, y = PM)) +
geom_point() +
geom_line() +
theme_classic() +
ylim(0, 0.4) + ylab("Probablity mass") +
xlab("N") +
labs(title="(c)") +
facet_grid(.~cv_abund)
SADs
dat$cv_abund <- paste("CV[N] =", dat$cv_abund)
dat <- SAD.prob.mass(1000, 100)
dat$cv_abund <- paste("CV[N] =", dat$cv_abund)
SADs <- ggplot(data = dat, aes(x=N, y = PM)) +
geom_point() +
geom_line() +
theme_classic() +
ylim(0, 0.4) + ylab("Probablity mass") +
xlab("N") +
labs(title="(c)") +
facet_grid(.~cv_abund)
SADs
dat$cv_abund <- expression(paste("CV[N] =", dat$cv_abund))
dat <- SAD.prob.mass(1000, 100)
dat$cv_abund <- expression(paste("CV[N] =", dat$cv_abund))
dat
dat$cv_abund <- paste(expression("CV[N] ="), dat$cv_abund)
dat
dat <- SAD.prob.mass(1000, 100)
dat$cv_abund <- paste(expression("CV[N] ="), dat$cv_abund)
SADs <- ggplot(data = dat, aes(x=N, y = PM)) +
geom_point() +
geom_line() +
theme_classic() +
ylim(0, 0.4) + ylab("Probablity mass") +
xlab("N") +
labs(title="(c)") +
facet_grid(.~cv_abund)
SADs
dat$cv_abund <- paste(expression("CV[N]"), dat$cv_abund)
dat$cv_abund <- paste(expression("CV[N]"), dat$cv_abund)
dat <- SAD.prob.mass(1000, 100)
dat$cv_abund <- paste(expression("CV[N]"), dat$cv_abund)
SADs <- ggplot(data = dat, aes(x=N, y = PM)) +
geom_point() +
geom_line() +
theme_classic() +
ylim(0, 0.4) + ylab("Probablity mass") +
xlab("N") +
labs(title="(c)") +
facet_grid(.~cv_abund)
SADs
dat$cv_abund <- paste(expression(CV[N]), dat$cv_abund)
dat <- SAD.prob.mass(1000, 100)
dat$cv_abund <- paste(expression(CV[N]), dat$cv_abund)
SADs <- ggplot(data = dat, aes(x=N, y = PM)) +
geom_point() +
geom_line() +
theme_classic() +
ylim(0, 0.4) + ylab("Probablity mass") +
xlab("N") +
labs(title="(c)") +
facet_grid(.~cv_abund)
SADs
dat <- SAD.prob.mass(1000, 100)
dat$cv_abund <- paste(expression(CV[N]=), dat$cv_abund)
SADs <- ggplot(data = dat, aes(x=N, y = PM)) +
geom_point() +
geom_line() +
theme_classic() +
ylim(0, 0.4) + ylab("Probablity mass") +
xlab("N") +
labs(title="(c)") +
facet_grid(.~cv_abund)
SADs
dat$cv_abund <- paste(expression(CV[N]"="), dat$cv_abund)
dat$cv_abund <- paste(expression(CV[N]), dat$cv_abund)
dat <- SAD.prob.mass(1000, 100)
dat$cv_abund <- paste(expression(CV[N]), dat$cv_abund)
SADs <- ggplot(data = dat, aes(x=N, y = PM)) +
geom_point() +
geom_line() +
theme_classic() +
ylim(0, 0.4) + ylab("Probablity mass") +
xlab("N") +
labs(title="(c)") +
facet_grid(.~cv_abund)
SADs
dat$cv_abund <- paste(expression(CV[N]), "=", dat$cv_abund)
SADs <- ggplot(data = dat, aes(x=N, y = PM)) +
geom_point() +
geom_line() +
theme_classic() +
ylim(0, 0.4) + ylab("Probablity mass") +
xlab("N") +
labs(title="(c)") +
facet_grid(.~cv_abund)
SADs
dat <- SAD.prob.mass(1000, 100)
dat$cv_abund <- paste(expression(CV[N]), "=", dat$cv_abund)
SADs <- ggplot(data = dat, aes(x=N, y = PM)) +
geom_point() +
geom_line() +
theme_classic() +
ylim(0, 0.4) + ylab("Probablity mass") +
xlab("N") +
labs(title="(c)") +
facet_grid(.~cv_abund)
SADs
dat$cv_abund <- paste(expression('CV'[N]), "=", dat$cv_abund)
dat <- SAD.prob.mass(1000, 100)
dat$cv_abund <- paste(expression('CV'[N]), "=", dat$cv_abund)
SADs <- ggplot(data = dat, aes(x=N, y = PM)) +
geom_point() +
geom_line() +
theme_classic() +
ylim(0, 0.4) + ylab("Probablity mass") +
xlab("N") +
labs(title="(c)") +
facet_grid(.~cv_abund)
SADs
dat$cv_abund <- paste("CV_N =", dat$cv_abund)
dat <- SAD.prob.mass(1000, 100)
dat$cv_abund <- paste("CV_N =", dat$cv_abund)
SADs <- ggplot(data = dat, aes(x=N, y = PM)) +
geom_point() +
geom_line() +
theme_classic() +
ylim(0, 0.4) + ylab("Probablity mass") +
xlab("N") +
labs(title="(c)") +
facet_grid(.~cv_abund)
SADs
res <- read.csv("sim_results.csv")
slope.vs.beta.E <- ggplot(data = res, aes(x = as.factor(beta), y = slope.E)) +
#geom_vline(xintercept=as.factor(0), linetype = "dashed", colour = "grey") +
geom_abline(intercept=0, slope = 0, linetype = "dashed", colour = "grey") +
geom_boxplot(aes(fill = type), outlier.colour = "grey", outlier.shape = 1) +
facet_grid(.~as.factor(cv.abund)) +
theme_classic() +
ylim(c(-1.2,1.2)) +
labs(title="(b)") +
xlab(expression(beta)) +
ylab("ExAR slope") +
theme(legend.position = "none")
slope.vs.beta.E
head(res)
res <- read.csv("sim_results.csv")
res$cv_abund <- paste("CV_N =", res$cv_abund)
slope.vs.beta.E <- ggplot(data = res, aes(x = as.factor(beta), y = slope.E)) +
#geom_vline(xintercept=as.factor(0), linetype = "dashed", colour = "grey") +
geom_abline(intercept=0, slope = 0, linetype = "dashed", colour = "grey") +
geom_boxplot(aes(fill = type), outlier.colour = "grey", outlier.shape = 1) +
facet_grid(.~as.factor(cv.abund)) +
theme_classic() +
ylim(c(-1.2,1.2)) +
labs(title="(b)") +
xlab(expression(beta)) +
ylab("ExAR slope") +
theme(legend.position = "none")
slope.vs.beta.E
slope.vs.beta.P <- ggplot(data = res, aes(x = as.factor(beta), y = slope.P)) +
#geom_vline(xintercept=as.factor(0), linetype = "dashed", colour = "grey") +
geom_abline(intercept=0, slope = 0, linetype = "dashed", colour = "grey") +
geom_boxplot(aes(fill = type), outlier.colour = "grey", outlier.shape = 1) +
facet_grid(.~as.factor(cv.abund)) +
theme_classic() +
xlab(expression(beta)) +
ylab("PxAR slope") +
labs(title="(a)") +
theme(legend.position = c(0.1, 0.8))
slope.vs.beta.P
slope.simple <- ggplot(data = res, aes(x = as.factor(beta), y = slope.P)) +
#geom_vline(xintercept=as.factor(0), linetype = "dashed", colour = "grey") +
geom_abline(intercept=0, slope = 0, linetype = "dashed", colour = "grey") +
geom_boxplot(aes(fill = type), outlier.colour = "grey", outlier.shape = 1) +
#facet_grid(.~as.factor(cv.abund)) +
theme_classic() +
xlab(expression(beta)) +
ylab("PxAR slope") +
theme(legend.position = c(0.8, 0.8))
slope.simple
grid.arrange(SADs, slope.vs.beta.E, slope.vs.beta.P , nrow = 3, heights=c(0.4, 0.7, 0.7))
## Export figure for the paper
pdf("Figure_beta_vs_scaling.pdf", width = 8, height=11)
grid.arrange( slope.vs.beta.P, slope.vs.beta.E, SADs, nrow = 3, heights=c(0.7, 0.7, 0.4))
dev.off()
slope.vs.beta.E
res
res$cv_abund
res <- read.csv("sim_results.csv")
res$cv_abund <- paste("CV_N =", res$cv_abund)
slope.vs.beta.E <- ggplot(data = res, aes(x = as.factor(beta), y = slope.E)) +
#geom_vline(xintercept=as.factor(0), linetype = "dashed", colour = "grey") +
geom_abline(intercept=0, slope = 0, linetype = "dashed", colour = "grey") +
geom_boxplot(aes(fill = type), outlier.colour = "grey", outlier.shape = 1) +
facet_grid(.~as.factor(cv.abund)) +
theme_classic() +
ylim(c(-1.2,1.2)) +
labs(title="(b)") +
xlab(expression(beta)) +
ylab("ExAR slope") +
theme(legend.position = "none")
slope.vs.beta.E
res
res <- read.csv("sim_results.csv")
res$cv.abund <- paste("CV_N =", res$cv.abund)
slope.vs.beta.E <- ggplot(data = res, aes(x = as.factor(beta), y = slope.E)) +
#geom_vline(xintercept=as.factor(0), linetype = "dashed", colour = "grey") +
geom_abline(intercept=0, slope = 0, linetype = "dashed", colour = "grey") +
geom_boxplot(aes(fill = type), outlier.colour = "grey", outlier.shape = 1) +
facet_grid(.~as.factor(cv.abund)) +
theme_classic() +
ylim(c(-1.2,1.2)) +
labs(title="(b)") +
xlab(expression(beta)) +
ylab("ExAR slope") +
theme(legend.position = "none")
slope.vs.beta.E
slope.vs.beta.P <- ggplot(data = res, aes(x = as.factor(beta), y = slope.P)) +
#geom_vline(xintercept=as.factor(0), linetype = "dashed", colour = "grey") +
geom_abline(intercept=0, slope = 0, linetype = "dashed", colour = "grey") +
geom_boxplot(aes(fill = type), outlier.colour = "grey", outlier.shape = 1) +
facet_grid(.~as.factor(cv.abund)) +
theme_classic() +
xlab(expression(beta)) +
ylab("PxAR slope") +
labs(title="(a)") +
theme(legend.position = c(0.1, 0.8))
slope.vs.beta.P
slope.simple <- ggplot(data = res, aes(x = as.factor(beta), y = slope.P)) +
#geom_vline(xintercept=as.factor(0), linetype = "dashed", colour = "grey") +
geom_abline(intercept=0, slope = 0, linetype = "dashed", colour = "grey") +
geom_boxplot(aes(fill = type), outlier.colour = "grey", outlier.shape = 1) +
#facet_grid(.~as.factor(cv.abund)) +
theme_classic() +
xlab(expression(beta)) +
ylab("PxAR slope") +
theme(legend.position = c(0.8, 0.8))
slope.simple
grid.arrange(SADs, slope.vs.beta.E, slope.vs.beta.P , nrow = 3, heights=c(0.4, 0.7, 0.7))
## Export figure for the paper
pdf("Figure_beta_vs_scaling.pdf", width = 8, height=11)
grid.arrange( slope.vs.beta.P, slope.vs.beta.E, SADs, nrow = 3, heights=c(0.7, 0.7, 0.4))
dev.off()
?labeller
slope.vs.beta.E <- ggplot(data = res, aes(x = as.factor(beta), y = slope.E)) +
#geom_vline(xintercept=as.factor(0), linetype = "dashed", colour = "grey") +
geom_abline(intercept=0, slope = 0, linetype = "dashed", colour = "grey") +
geom_boxplot(aes(fill = type), outlier.colour = "grey", outlier.shape = 1) +
facet_grid(.~as.factor(cv.abund), labeller = label_parsed) +
theme_classic() +
ylim(c(-1.2,1.2)) +
labs(title="(b)") +
xlab(expression(beta)) +
ylab("ExAR slope") +
theme(legend.position = "none")
slope.vs.beta.E
res <- read.csv("sim_results.csv")
res$cv.abund <- paste("CV[N] =", res$cv.abund)
slope.vs.beta.E <- ggplot(data = res, aes(x = as.factor(beta), y = slope.E)) +
#geom_vline(xintercept=as.factor(0), linetype = "dashed", colour = "grey") +
geom_abline(intercept=0, slope = 0, linetype = "dashed", colour = "grey") +
geom_boxplot(aes(fill = type), outlier.colour = "grey", outlier.shape = 1) +
facet_grid(.~as.factor(cv.abund), labeller = label_parsed) +
theme_classic() +
ylim(c(-1.2,1.2)) +
labs(title="(b)") +
xlab(expression(beta)) +
ylab("ExAR slope") +
theme(legend.position = "none")
slope.vs.beta.E
res$cv.abund
res <- read.csv("sim_results.csv")
res$cv.abund <- paste("CV[N]==", res$cv.abund, sep="")
slope.vs.beta.E <- ggplot(data = res, aes(x = as.factor(beta), y = slope.E)) +
#geom_vline(xintercept=as.factor(0), linetype = "dashed", colour = "grey") +
geom_abline(intercept=0, slope = 0, linetype = "dashed", colour = "grey") +
geom_boxplot(aes(fill = type), outlier.colour = "grey", outlier.shape = 1) +
facet_grid(.~as.factor(cv.abund), labeller = label_parsed) +
theme_classic() +
ylim(c(-1.2,1.2)) +
labs(title="(b)") +
xlab(expression(beta)) +
ylab("ExAR slope") +
theme(legend.position = "none")
slope.vs.beta.E
slope.vs.beta.P <- ggplot(data = res, aes(x = as.factor(beta), y = slope.P)) +
#geom_vline(xintercept=as.factor(0), linetype = "dashed", colour = "grey") +
geom_abline(intercept=0, slope = 0, linetype = "dashed", colour = "grey") +
geom_boxplot(aes(fill = type), outlier.colour = "grey", outlier.shape = 1) +
facet_grid(.~as.factor(cv.abund)) +
theme_classic() +
xlab(expression(beta)) +
ylab("PxAR slope") +
labs(title="(a)") +
theme(legend.position = c(0.1, 0.8))
slope.vs.beta.P
slope.vs.beta.P <- ggplot(data = res, aes(x = as.factor(beta), y = slope.P)) +
#geom_vline(xintercept=as.factor(0), linetype = "dashed", colour = "grey") +
geom_abline(intercept=0, slope = 0, linetype = "dashed", colour = "grey") +
geom_boxplot(aes(fill = type), outlier.colour = "grey", outlier.shape = 1) +
facet_grid(.~as.factor(cv.abund), labeller = label_parsed) +
theme_classic() +
xlab(expression(beta)) +
ylab("PxAR slope") +
labs(title="(a)") +
theme(legend.position = c(0.1, 0.8))
slope.vs.beta.P
dat <- SAD.prob.mass(1000, 100)
res$cv_abund <- paste("CV[N]==", res$cv_abund, sep="")
SADs <- ggplot(data = dat, aes(x=N, y = PM)) +
geom_point() +
geom_line() +
theme_classic() +
ylim(0, 0.4) + ylab("Probablity mass") +
xlab("N") +
labs(title="(c)") +
facet_grid(.~cv_abund, labeller = label_parsed)
SADs
dat <- SAD.prob.mass(1000, 100)
dat$cv_abund <- paste("CV[N]==", dat$cv_abund, sep="")
SADs <- ggplot(data = dat, aes(x=N, y = PM)) +
geom_point() +
geom_line() +
theme_classic() +
ylim(0, 0.4) + ylab("Probablity mass") +
xlab("N") +
labs(title="(c)") +
facet_grid(.~cv_abund, labeller = label_parsed)
SADs
rf.P <- randomForest(slope.P ~ alpha +
beta +
N.tot +
sigma +
cv.abund +
S.tot,
data = na.omit(res)) # note the na.omit()
res <- read.csv("sim_results.csv")
res$cv.abund <- paste("CV[N]==", res$cv.abund, sep="")
slope.vs.beta.E <- ggplot(data = res, aes(x = as.factor(beta), y = slope.E)) +
#geom_vline(xintercept=as.factor(0), linetype = "dashed", colour = "grey") +
geom_abline(intercept=0, slope = 0, linetype = "dashed", colour = "grey") +
geom_boxplot(aes(fill = type), outlier.colour = "grey", outlier.shape = 1) +
facet_grid(.~as.factor(cv.abund), labeller = label_parsed) +
theme_classic() +
ylim(c(-1.2,1.2)) +
labs(title="(b)") +
xlab(expression(beta)) +
ylab("ExAR slope") +
theme(legend.position = "none")
slope.vs.beta.E
slope.vs.beta.P <- ggplot(data = res, aes(x = as.factor(beta), y = slope.P)) +
#geom_vline(xintercept=as.factor(0), linetype = "dashed", colour = "grey") +
geom_abline(intercept=0, slope = 0, linetype = "dashed", colour = "grey") +
geom_boxplot(aes(fill = type), outlier.colour = "grey", outlier.shape = 1) +
facet_grid(.~as.factor(cv.abund), labeller = label_parsed) +
theme_classic() +
xlab(expression(beta)) +
ylab("PxAR slope") +
labs(title="(a)") +
theme(legend.position = c(0.1, 0.8))
slope.vs.beta.P
slope.simple <- ggplot(data = res, aes(x = as.factor(beta), y = slope.P)) +
#geom_vline(xintercept=as.factor(0), linetype = "dashed", colour = "grey") +
geom_abline(intercept=0, slope = 0, linetype = "dashed", colour = "grey") +
geom_boxplot(aes(fill = type), outlier.colour = "grey", outlier.shape = 1) +
#facet_grid(.~as.factor(cv.abund)) +
theme_classic() +
xlab(expression(beta)) +
ylab("PxAR slope") +
theme(legend.position = c(0.8, 0.8))
slope.simple
grid.arrange(SADs, slope.vs.beta.E, slope.vs.beta.P , nrow = 3, heights=c(0.4, 0.7, 0.7))
## Export figure for the paper
pdf("Figure_beta_vs_scaling.pdf", width = 8, height=11)
grid.arrange( slope.vs.beta.P, slope.vs.beta.E, SADs, nrow = 3, heights=c(0.7, 0.7, 0.4))
dev.off()
